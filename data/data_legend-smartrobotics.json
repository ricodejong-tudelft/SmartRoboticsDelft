{
    "version":
    {
        "type": "int",
        "description": "Measurement case version. Used for compatibility checks when loading the data."
    },
    "type":
    {
        "type": "string",
        "description": "Type of measurement taken. Used to distinguish between different measurement scenarios (e.g. zeroing or payload estimation)."
    },
    "start_time":
    {
        "type": "float",
        "description": "Start time of the raw_measurements data collection (seconds from unix epoch)."
    },
    "end_time":
    {
        "type": "float",
        "description": "End time of the raw_measurements data collection (seconds from unix epoch)."
    },
    "sampling_rate":
    {
        "type": "float",
        "description": "The sampling rate of the raw measurement data [Hz]."
    },
    "zero_offset":
    {
        "type": "float",
        "description": "The offset correction for the final weight [kg]. `raw_measurements[i].value - zero_offset` gives the calibrated measurement."
    },
    "robot_type":
    {
        "type": "string",
        "description": "Robot model type which took the measurements"
    },
    "eoat_params":
    {
        "type": "map of string to float",
        "description": "Robot-specific parameters that can be neglected for the assignment"
    },
    "force_sensor_offset":
    {
        "type": "list of list of float",
        "description": "Transform describing the position and orientation of the force sensor with respect to the robot flange. force_sensor_offset[0] is the translation vector (length 3), force_sensor_offset[1] the rotation matrix as a quaternion (length 4)"
    },
    "raw_measurements":
    {
        "timestamp":
        {
            "type": "float",
            "description": "Time of the measurement (seconds from unix epoch)."
        },
        "value":
        {
            "type": "float",
            "description": "Weight value from the force sensor in kg."
        },
        "force_vector":
        {
            "type": "list of float",
            "description": "Force vector measured by the force sensor (length 3). Format is [Mx, My, Fz], where Fz is the force in z-direction [N] (usually pointing away from the flange) and Mx, My are the moments around x and y axis of the force sensor [Nm] (usually in a plane parallel to the flange)."
        },
        "robot_tcp":
        {
            "timestamp":
            {
                "type": "float",
                "description": "Time of the measurement (seconds from unix epoch). Should be close to the weight measurement timestamp, but might not be the same."
            },
            "flange":
            {
                "type": "list of list of float",
                "description": "Transform describing the position and orientation of the robot flange with respect to the robot base. flange[0] is the translation vector (length 3), flange[1] the rotation matrix as a quaternion (length 4)."
            },
            "tcp_offset":
            {
                "type": "list of list of float",
                "description": "Transform describing the position and orientation of the robot tcp with respect to the flange. tcp_offset[0] is the translation vector (length 3), tcp_offset[1] the rotation matrix as a quaternion (length 4)."
            },
            "velocity_linear":
            {
                "type": "list of float",
                "description": "Linear velocity of the robot tcp in x, y, z direction [m/s]. Format is [Vx, Vy, Vz]."
            },
            "velocity_angular":
            {
                "type": "list of float",
                "description": "Angluar velocity of the robot tcp around x, y, z axis [rad/s]. Format is [Wx, Wy, Wz]."
            },
            "joint_angles":
            {
                "type": "list of float",
                "description": "Joint angles of the robot at the time of the measurement [rad] starting from the base joint and listing them in increasing order. Format is [base, shoulder, elbow, wrist_1, wrist_2, wrist_3] for UR robots like this one."
            }
        }
    }
}